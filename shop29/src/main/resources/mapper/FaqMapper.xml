<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toy2.shop29.Board.Faq.dao.FaqMapper">

    <!-- Faq의 총 개수를 조회하는 쿼리 -->
    <select id="count" resultType="int">
        SELECT COUNT(*)
        FROM Faq
    </select>

    <!-- 특정 Faq를 조회하는 쿼리 -->
    <select id="select" parameterType="int" resultType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        SELECT faq_id,
               faq_type_id,
               faq_title,
               faq_content,
               faq_creator_id,
               faq_modifier_id,
               faq_creation_time,
               faq_modification_time,
               faq_view_count
        FROM Faq
        WHERE faq_id = #{faqId}
    </select>

    <!-- 모든 Faq를 조회하는 쿼리 -->
    <select id="selectAll" resultType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        SELECT faq_id,
               faq_type_id,
               faq_title,
               faq_content,
               faq_creator_id,
               faq_modifier_id,
               faq_creation_time,
               faq_modification_time,
               faq_view_count
        FROM Faq
        ORDER BY faq_creation_time DESC, faq_id DESC
    </select>

    <!-- 페이지네이션을 적용하여 Faq를 조회하는 쿼리 -->
    <select id="selectPage" parameterType="map" resultType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        SELECT faq_id,
               faq_type_id,
               faq_title,
               faq_content,
               faq_creator_id,
               faq_modifier_id,
               faq_creation_time,
               faq_modification_time,
               faq_view_count
        FROM Faq
        ORDER BY faq_creation_time DESC, faq_id DESC
            LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 검색어를 포함한 총 FAQ 수를 조회하는 쿼리 -->
    <select id="countBySearchQuery" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM Faq
        WHERE
        <if test="option == 'A'">
            faq_title LIKE CONCAT('%', #{searchQuery}, '%')
        </if>
        <if test="option == 'B'">
            faq_content LIKE CONCAT('%', #{searchQuery}, '%')
        </if>
        <if test="option != 'A' and option != 'B'">
            faq_title LIKE CONCAT('%', #{searchQuery}, '%')
        </if>
    </select>

    <!-- 검색어를 포함한 페이지 데이터를 조회하는 쿼리 -->
    <select id="selectPageWithSearch" parameterType="map" resultType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        SELECT faq_id,
        faq_type_id,
        faq_title,
        faq_content,
        faq_creator_id,
        faq_modifier_id,
        faq_creation_time,
        faq_modification_time,
        faq_view_count
        FROM Faq
        WHERE
        <choose>
            <when test="option == 'A'">
                faq_title LIKE CONCAT('%', #{searchQuery}, '%')
            </when>
            <when test="option == 'B'">
                faq_content LIKE CONCAT('%', #{searchQuery}, '%')
            </when>
            <otherwise>
                faq_title LIKE CONCAT('%', #{searchQuery}, '%')
            </otherwise>
        </choose>
        ORDER BY faq_creation_time DESC, faq_id DESC
        LIMIT #{offset}, #{pageSize}
    </select>



    <!-- Faq를 삽입하는 쿼리 -->
    <insert id="insert" parameterType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        INSERT INTO Faq (faq_title, faq_content, faq_creator_id, faq_creation_time)
        VALUES (#{faqTitle}, #{faqContent}, #{faqCreatorId}, NOW())
    </insert>

    <!-- 모든 Faq를 삭제하는 쿼리 -->
    <delete id="deleteAll">
        DELETE FROM Faq
    </delete>

    <!-- 특정 Faq를 삭제하는 쿼리 -->
    <delete id="delete" parameterType="map">
        DELETE FROM Faq
        WHERE faq_id = #{faqId} AND faq_creator_id = #{faqCreatorId}
    </delete>

    <!-- Faq를 업데이트하는 쿼리 -->
    <update id="update" parameterType="com.toy2.shop29.Board.Faq.domain.FaqDto">
        UPDATE Faq
        SET faq_title = #{faqTitle},
            faq_content = #{faqContent},
            faq_modification_time = NOW()
        WHERE faq_id = #{faqId}
    </update>

</mapper>
