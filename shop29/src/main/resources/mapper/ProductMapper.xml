<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toy2.shop29.product.dao.ProductMapper">

    <!-- product+category 합친 Dto 반환 -->
    <select id="selectProductWithCategories" resultMap="ProductCategoryResultMap">
        SELECT
            p.product_id,
            p.brand_id,
            b.brand_name,
            p.product_name,
            p.price,
            p.sale_ratio,
            p.rating,
            p.is_exclusive,
            p.size_table,
            p.start_date,
            mc.major_category_id,
            mc.major_category_name,
            midc.middle_category_id,
            midc.middle_category_name,
            sc.small_category_id,
            sc.small_category_name
        FROM
            product p
                JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
                JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
                JOIN majorcategory mc ON midc.major_category_id = mc.major_category_id
                JOIN brand b ON p.brand_id = b.brand_id
        WHERE p.product_id = #{productId}
    </select>

    <resultMap id="ProductCategoryResultMap" type="com.toy2.shop29.product.domain.product.ProductWithCategoriesDto">
        <id property="productId" column="product_id"/>
        <result property="brandId" column="brand_id"/>
        <result property="brandName" column="brand_name"/>
        <result property="productName" column="product_name"/>
        <result property="price" column="price"/>
        <result property="saleRatio" column="sale_ratio"/>
        <result property="rating" column="rating"/>
        <result property="isExclusive" column="is_exclusive"/>
        <result property="sizeTable" column="size_table"/>
        <result property="startDate" column="start_date"/>
        <!-- 카테고리 이름 매핑 -->
        <result property="majorCategoryId" column="major_category_id"/>
        <result property="majorCategoryName" column="major_category_name"/>
        <result property="middleCategoryId" column="middle_category_id"/>
        <result property="middleCategoryName" column="middle_category_name"/>
        <result property="smallCategoryId" column="small_category_id"/>
        <result property="smallCategoryName" column="small_category_name"/>
    </resultMap>

    <!-- 같은 소분류Id를 가지는 제품 갯수 세기 -->
    <select id="countProductBySmall" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM product p
        WHERE p.small_category_id = #{smallCategoryId}
    </select>

    <!-- 같은 중분류Id를 가지는 제품 갯수 세기 -->
    <select id="countProductByMiddle" resultType="int">
        SELECT COUNT(*)
        FROM product p
                 JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
                 JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE midc.middle_category_id = #{middleCategoryId}
    </select>

    <resultMap id="ProductWithMiddleSmallMap" type="com.toy2.shop29.product.domain.product.ProductWithMiddleSmallDto">
        <id property="productId" column="product_id"/>
        <result property="productName" column="product_name"/>
        <result property="price" column="price"/>
        <result property="saleRatio" column="sale_ratio"/>
        <result property="rating" column="rating"/>
        <result property="isExclusive" column="is_exclusive"/>
        <result property="sizeTable" column="size_table"/>
        <result property="middleCategoryName" column="middle_category_name"/>
        <result property="middleCategoryId" column="middle_category_id"/>
        <result property="smallCategoryName" column="small_category_name"/>
        <result property="smallCategoryId" column="small_category_id"/>
        <result property="brandId" column="brand_id"/>
        <result property="startDate" column="start_date"/>
        <result property="createdDate" column="created_date"/>
        <result property="createdId" column="created_id"/>
        <result property="updatedDate" column="updated_date"/>
        <result property="updatedId" column="updated_id"/>
    </resultMap>

    <!-- 가격 높은 순 정렬 -->
    <select id="sortByPriceDesc" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.price,
        p.brand_id,
        p.sale_ratio,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        price DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 가격 낮은 순 정렬 -->
    <select id="sortByPriceAsc" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.price,
        p.brand_id,
        p.sale_ratio,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        price ASC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 신상품 순 정렬 (start_date 기준) -->
    <select id="sortByNewest" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.price,
        p.sale_ratio,
        p.brand_id,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        start_date DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 할인율 높은 순 정렬 -->
    <select id="sortByHighDiscount" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.price,
        p.brand_id,
        p.sale_ratio,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        sale_ratio DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 별점 높은 순 정렬 -->
    <select id="sortByRating" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.brand_id,
        p.price,
        p.sale_ratio,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        rating DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 기본 정렬: 상품 ID 기준 -->
    <select id="sortDefault" parameterType="map" resultMap="ProductWithMiddleSmallMap">
        SELECT
        p.product_id,
        p.product_name,
        p.price,
        p.brand_id,
        p.sale_ratio,
        p.rating,
        p.is_exclusive,
        p.size_table,
        p.start_date,
        p.created_date,
        p.created_id,
        p.updated_date,
        p.updated_id,
        midc.middle_category_name,
        midc.middle_category_id,
        sc.small_category_name,
        sc.small_category_id
        FROM
        product p
        JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
        JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE
        <choose>
            <when test="smallCategoryId != null">
                sc.small_category_id = #{smallCategoryId}
            </when>
            <otherwise>
                midc.middle_category_id = #{middleCategoryId}
            </otherwise>
        </choose>
        ORDER BY
        p.product_id DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <update id="updateProductStock" parameterType="map">
        UPDATE productoptionvalue
        SET stock = #{quantity}
        WHERE product_id = #{productId} AND option_value_id = #{optionValueId}
    </update>

    <!-- 상품 ID로 상품 가격 검색 -->
    <select id="getProductPriceByProductId" resultType="Long">
        SELECT price
        FROM product
        WHERE product_id = #{productId}
    </select>

    <!-- 중분류에 해당하는 product 갯수 세기 -->
    <select id="countMiddleCategory" resultType="int">
        SELECT COUNT(*)
        FROM product p
                 JOIN smallcategory sc ON p.small_category_id = sc.small_category_id
                 JOIN middlecategory midc ON sc.middle_category_id = midc.middle_category_id
        WHERE midc.middle_category_id = #{middleCategoryId}
    </select>
    <!--    상품 재고 반환-->
    <select id="checkProductStock" parameterType="map" resultType="long">
        SELECT stock
        FROM productoptionvalue
        WHERE product_id = #{productId} AND option_value_id = #{optionValueId}
    </select>

    <!-- product_id를 input으로 받아 해당하는 product를 반환하는 select -->
    <select id="select" parameterType="int" resultType="com.toy2.shop29.product.domain.ProductDto">
        SELECT product_id,
               small_category_id,
               product_name,
               brand_id,
               price,
               sale_ratio,
               rating,
               is_exclusive,
               size_table,
               start_date,
               created_date,
               created_id,
               updated_date,
               updated_id
        FROM product
        where product_id = #{productId}
    </select>

    <!-- product 총 갯수 세기 -->
    <select id="count" resultType="int">
        SELECT count(*) FROM product
    </select>

    <!-- 새 product 등록 -->
    <insert id="insert" parameterType="com.toy2.shop29.product.domain.ProductDto">
        INSERT INTO product
        (product_id, small_category_id, product_name, brand_id, price, sale_ratio, rating, is_exclusive, size_table, start_date, created_date, created_id, updated_date, updated_id)
        VALUES
            (#{productId}, #{smallCategoryId}, #{productName}, #{brandId}, #{price}, #{saleRatio}, #{rating}, #{isExclusive}, #{sizeTable}, #{startDate}, #{createdDate}, #{createdId}, #{updatedDate}, #{updatedId})
    </insert>

</mapper>