<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toy2.shop29.Board.Notice.dao.BoardMapper">

    <!-- 공지사항의 총 개수를 조회하는 쿼리 -->
    <select id="count" resultType="int">
        select count(*) from Notice
    </select>

    <!-- 특정 공지사항을 조회하는 쿼리 -->
    <select id="select" parameterType="int" resultType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        select notice_id,
               notice_title,
               notice_content,
               notice_creator_id,
               notice_modifier_id,
               notice_creation_time,
               notice_modification_time,
               top_fixed,
               top_fixed_priority
        from Notice
        where notice_id = #{noticeId}
    </select>

    <!-- 모든 공지사항을 조회하는 쿼리 -->
    <select id="selectAll" resultType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        select notice_id,
               notice_title,
               notice_content,
               notice_creator_id,
               notice_modifier_id,
               notice_creation_time,
               notice_modification_time,
               top_fixed,
               top_fixed_priority
        from Notice
        order by notice_creation_time desc, notice_id desc
    </select>

    <!-- 페이지네이션을 적용하여 공지사항을 조회하는 쿼리 -->
    <select id="selectPage" parameterType="map" resultType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        select notice_id,
               notice_title,
               notice_content,
               notice_creator_id,
               notice_modifier_id,
               notice_creation_time,
               notice_modification_time,
               top_fixed,
               top_fixed_priority
        from Notice
        order by notice_id desc, notice_creation_time desc
            limit #{offset}, #{pageSize}
    </select>

    <!-- 공지사항을 삽입하는 쿼리 -->
    <insert id="insert" parameterType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        insert into Notice (notice_title, notice_content, notice_creator_id, notice_creation_time)
        values (#{noticeTitle}, #{noticeContent}, #{noticeCreatorId}, NOW())
    </insert>
    <!-- 모든 공지사항을 삭제하는 쿼리 -->
    <delete id="deleteAll">
        delete from Notice
    </delete>
<!--    &lt;!&ndash;관리자만 삭제 가능하게 하는 쿼리 &ndash;&gt;-->
<!--    <delete id="deleteForAdmin">-->
<!--        delete from board where notice_id=#{noticeId}-->
<!--    </delete>-->

    <!-- 특정 공지사항을 삭제하는 쿼리 -->
    <delete id="delete" parameterType="map">
        delete from Notice
        where notice_id = #{noticeId} and notice_creator_id = #{noticeCreatorId}
    </delete>
    <!-- 공지사항을 업데이트하는 쿼리 -->
    <update id="update" parameterType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        update Notice
        set notice_title = #{noticeTitle},
            notice_content = #{noticeContent},
            notice_modification_time = now()
        where notice_id = #{noticeId}
    </update>
    <!-- 상단 고정 공지사항 목록을 가져오는 쿼리 -->
    <select id="selectFixedNotices" resultType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        SELECT notice_id,
               notice_title,
               notice_content,
               notice_creator_id,
               notice_modifier_id,
               notice_creation_time,
               notice_modification_time,
               top_fixed,
               top_fixed_priority
        FROM Notice
        WHERE top_fixed = 1
        ORDER BY top_fixed_priority ASC, notice_creation_time DESC
    </select>

    <update id="updateFixedNoticePriority" parameterType="com.toy2.shop29.Board.Notice.domain.BoardDto">
        UPDATE Notice
        SET top_fixed_priority = #{priority}
        WHERE notice_id = #{noticeId}
    </update>



</mapper>
